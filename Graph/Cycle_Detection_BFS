/*
This is simple BFS code to detect loop in graph , eithere graph is connected or not connected
*/

public boolean isCycle(int V, ArrayList<ArrayList<Integer>> adj) {
        boolean[] vis = new boolean[V];
        for(int i = 0 ; i < V ; i++){
            if(!vis[i]){
              if(BFS(adj,-1,i,vis)) return true;
            }
        }
        return false;
        
    }
    public boolean BFS(ArrayList<ArrayList<Integer>> adj , int par , int nod , boolean[] vis){
        Queue<Pair> q = new LinkedList<>();
        q.add(new Pair(nod,par));
        while(!q.isEmpty()){
            Pair pair = q.remove();
            int node = pair.first;
//  you can either make here vis node == true or below for loop and when make queue k;
            vis[node] = true;
            int parent = pair.second;
            for(int k : adj.get(node)){
                if(!vis[k]){
                    q.add(new Pair(k,node));
                }
                else if(parent!=k){
                    return true;
                }
            }
        }
        return false;
    }
