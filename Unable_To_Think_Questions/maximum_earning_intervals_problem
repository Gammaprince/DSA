class Solution {
    public long maxTaxiEarnings(int n, int[][] rides) {
        Arrays.sort(rides,(a,b)->{
            return a[0]-b[0];
        });
        long[] dp = new long[rides.length];
        Arrays.fill(dp,-1);
        return f(rides,0,dp);
    }
    public long f(int[][] rides , int i , long[] dp){
        if(i>=rides.length) return 0;
        if(dp[i]!=-1) return dp[i];
        long a = 0 , b = 0;
        a = (long)(rides[i][1]-rides[i][0] + rides[i][2])+f(rides,search(rides,rides[i][1],i),dp);
        b = f(rides,i+1,dp);
        return dp[i] = (long)Math.max(a,b);
    }
    public int search(int[][] rides , int val , int l){
        int h = rides.length-1;
        while(l<=h){
            int mid = h + (l - h) / 2;
            if(rides[mid][0] >= val){
                h = mid - 1;
            }
            else l = mid+1;
        }
        return l;
    }
}
